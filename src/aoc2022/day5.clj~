(ns aoc2022.day5
  (:require [aoc2022.utils :refer [read-input-as-string-vector]]
            [clojure.string :as str]))

(defn transpose
  [matrix]
  (apply mapv vector matrix))

(defn parse-stacks
  [file]
  (->> file
       read-input-as-string-vector
       (partition-by #(= "" %))
       first
       drop-last
       (mapv #(take-nth 4 (rest %)))
       transpose
       (map reverse)
       (map #(remove (fn [c] (= c \space)) %))
       (mapv #(apply vector %))))

(defn parse-instructions
  [file]
  (->> file
       read-input-as-string-vector
       (partition-by #(= "" %))
       (#(nth % 2))
       (mapv (fn [i]
               (let [[_ & matches] (re-matches  #"move (\d+) from (\d+) to (\d+)" i)]
                 matches)))
       (mapv #(mapv read-string %))))




(comment
  (parse-stacks "day5-test.txt")
  (parse-instructions "day5-test.txt")
  ,)




;; https://www.epilog.net/en/career
  
